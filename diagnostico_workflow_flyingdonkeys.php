<?php

/**
 * Script de Diagn√≥stico do Workflow "Lead to Opportunity" - FlyingDonkeys
 * Este script apenas faz diagn√≥stico, n√£o modifica nada
 */

require_once('class.php');

echo "=== DIAGN√ìSTICO DO WORKFLOW 'LEAD TO OPPORTUNITY' - FLYINGDONKEYS ===\n\n";

// Cliente para FlyingDonkeys
$client = new EspoApiClient('https://flyingdonkeys.com.br');
$client->setApiKey('7a6c08d438ee131971f561fd836b5e15');

echo "üîç 1. VERIFICANDO CONECTIVIDADE COM FLYINGDONKEYS\n";
echo str_repeat("-", 50) . "\n";

try {
    $testResponse = $client->request('GET', 'App/user');
    echo "‚úÖ Conex√£o com FlyingDonkeys: OK\n";
    echo "üìä Usu√°rio atual: " . ($testResponse['userName'] ?? 'N/A') . "\n";
} catch (Exception $e) {
    echo "‚ùå Erro de conex√£o: " . $e->getMessage() . "\n";
    exit(1);
}

echo "\nüîç 2. VERIFICANDO WORKFLOWS ATIVOS\n";
echo str_repeat("-", 50) . "\n";

try {
    $workflows = $client->request('GET', 'Workflow');

    if (isset($workflows['list']) && is_array($workflows['list'])) {
        echo "üìã Total de workflows encontrados: " . count($workflows['list']) . "\n\n";

        $leadWorkflows = [];
        $activeWorkflows = 0;

        foreach ($workflows['list'] as $workflow) {
            if ($workflow['isActive']) {
                $activeWorkflows++;
            }

            // Procurar workflows relacionados a Lead
            if (
                stripos($workflow['name'], 'lead') !== false ||
                stripos($workflow['name'], 'opportunity') !== false ||
                stripos($workflow['name'], 'Lead') !== false ||
                stripos($workflow['name'], 'Opportunity') !== false
            ) {

                $leadWorkflows[] = $workflow;
            }
        }

        echo "üìä Workflows ativos: $activeWorkflows\n";
        echo "üìä Workflows relacionados a Lead/Opportunity: " . count($leadWorkflows) . "\n\n";

        if (!empty($leadWorkflows)) {
            echo "üéØ WORKFLOWS ENCONTRADOS:\n";
            foreach ($leadWorkflows as $workflow) {
                echo "   üìã Nome: " . $workflow['name'] . "\n";
                echo "   üîÑ Status: " . ($workflow['isActive'] ? '‚úÖ ATIVO' : '‚ùå INATIVO') . "\n";
                echo "   üìÖ Criado: " . ($workflow['createdAt'] ?? 'N/A') . "\n";
                echo "   üÜî ID: " . $workflow['id'] . "\n";
                echo "   üìù Descri√ß√£o: " . ($workflow['description'] ?? 'Sem descri√ß√£o') . "\n";
                echo "\n";
            }
        } else {
            echo "‚ö†Ô∏è Nenhum workflow relacionado a Lead/Opportunity encontrado!\n";
        }
    } else {
        echo "‚ùå N√£o foi poss√≠vel obter a lista de workflows\n";
    }
} catch (Exception $e) {
    echo "‚ùå Erro ao buscar workflows: " . $e->getMessage() . "\n";
}

echo "\nüîç 3. VERIFICANDO ESTRUTURA DA ENTIDADE LEAD\n";
echo str_repeat("-", 50) . "\n";

try {
    $leadMetadata = $client->request('GET', 'Metadata/entities/Lead');

    if (isset($leadMetadata['fields'])) {
        echo "üìã Campos dispon√≠veis na entidade Lead:\n";

        $importantFields = ['firstName', 'emailAddress', 'source', 'status', 'createdOpportunityId'];

        foreach ($importantFields as $field) {
            if (isset($leadMetadata['fields'][$field])) {
                $fieldInfo = $leadMetadata['fields'][$field];
                echo "   ‚úÖ $field: " . ($fieldInfo['type'] ?? 'N/A') . "\n";
            } else {
                echo "   ‚ùå $field: Campo n√£o encontrado\n";
            }
        }

        // Verificar campos customizados
        $customFields = [];
        foreach ($leadMetadata['fields'] as $fieldName => $fieldInfo) {
            if (strpos($fieldName, 'c') === 0) { // Campos que come√ßam com 'c'
                $customFields[] = $fieldName;
            }
        }

        echo "\nüìã Campos customizados encontrados: " . count($customFields) . "\n";
        foreach ($customFields as $field) {
            echo "   üìù $field\n";
        }
    } else {
        echo "‚ùå N√£o foi poss√≠vel obter metadados da entidade Lead\n";
    }
} catch (Exception $e) {
    echo "‚ùå Erro ao buscar metadados do Lead: " . $e->getMessage() . "\n";
}

echo "\nüîç 4. VERIFICANDO ESTRUTURA DA ENTIDADE OPPORTUNITY\n";
echo str_repeat("-", 50) . "\n";

try {
    $opportunityMetadata = $client->request('GET', 'Metadata/entities/Opportunity');

    if (isset($opportunityMetadata['fields'])) {
        echo "üìã Campos dispon√≠veis na entidade Opportunity:\n";

        $importantFields = ['name', 'amount', 'stage', 'leadSource', 'accountId'];

        foreach ($importantFields as $field) {
            if (isset($opportunityMetadata['fields'][$field])) {
                $fieldInfo = $opportunityMetadata['fields'][$field];
                echo "   ‚úÖ $field: " . ($fieldInfo['type'] ?? 'N/A') . "\n";
            } else {
                echo "   ‚ùå $field: Campo n√£o encontrado\n";
            }
        }
    } else {
        echo "‚ùå N√£o foi poss√≠vel obter metadados da entidade Opportunity\n";
    }
} catch (Exception $e) {
    echo "‚ùå Erro ao buscar metadados da Opportunity: " . $e->getMessage() . "\n";
}

echo "\nüîç 5. VERIFICANDO LEADS RECENTES SEM OPORTUNIDADES\n";
echo str_repeat("-", 50) . "\n";

try {
    // Buscar leads criados nas √∫ltimas 24 horas
    $yesterday = date('Y-m-d H:i:s', strtotime('-24 hours'));
    $leads = $client->request('GET', 'Lead?where[0][type]=after&where[0][attribute]=createdAt&where[0][value]=' . $yesterday);

    if (isset($leads['list']) && is_array($leads['list'])) {
        echo "üìä Leads criados nas √∫ltimas 24 horas: " . count($leads['list']) . "\n\n";

        $leadsWithoutOpportunity = 0;

        foreach ($leads['list'] as $lead) {
            if (empty($lead['createdOpportunityId'])) {
                $leadsWithoutOpportunity++;
                echo "   ‚ùå Lead sem oportunidade: {$lead['firstName']} (ID: {$lead['id']})\n";
                echo "      üìÖ Criado em: {$lead['createdAt']}\n";
                echo "      üè∑Ô∏è Source: {$lead['source']}\n";
                echo "      üìä Status: {$lead['status']}\n\n";
            }
        }

        echo "üìä Total de leads sem oportunidade: $leadsWithoutOpportunity\n";
    } else {
        echo "‚ùå N√£o foi poss√≠vel obter leads recentes\n";
    }
} catch (Exception $e) {
    echo "‚ùå Erro ao buscar leads recentes: " . $e->getMessage() . "\n";
}

echo "\nüîç 6. VERIFICANDO LOGS DE WORKFLOW (SE DISPON√çVEL)\n";
echo str_repeat("-", 50) . "\n";

try {
    // Tentar buscar logs de workflow
    $workflowLogs = $client->request('GET', 'WorkflowLog?maxSize=10');

    if (isset($workflowLogs['list']) && is_array($workflowLogs['list'])) {
        echo "üìã Logs de workflow encontrados: " . count($workflowLogs['list']) . "\n\n";

        foreach ($workflowLogs['list'] as $log) {
            echo "   üìù Workflow: " . ($log['workflowName'] ?? 'N/A') . "\n";
            echo "   üìÖ Executado em: " . ($log['executedAt'] ?? 'N/A') . "\n";
            echo "   üîÑ Status: " . ($log['status'] ?? 'N/A') . "\n";
            echo "   üìä Entidade: " . ($log['entityType'] ?? 'N/A') . "\n";
            echo "   üÜî ID da entidade: " . ($log['entityId'] ?? 'N/A') . "\n";

            if (isset($log['errorMessage']) && !empty($log['errorMessage'])) {
                echo "   ‚ùå Erro: " . $log['errorMessage'] . "\n";
            }
            echo "\n";
        }
    } else {
        echo "‚ö†Ô∏è Nenhum log de workflow encontrado ou logs n√£o acess√≠veis\n";
    }
} catch (Exception $e) {
    echo "‚ö†Ô∏è Logs de workflow n√£o acess√≠veis: " . $e->getMessage() . "\n";
}

echo "\nüîç 7. VERIFICANDO PERMISS√ïES DO USU√ÅRIO API\n";
echo str_repeat("-", 50) . "\n";

try {
    $userInfo = $client->request('GET', 'App/user');

    if (isset($userInfo['id'])) {
        echo "üë§ Usu√°rio API: " . ($userInfo['userName'] ?? 'N/A') . "\n";
        echo "üÜî ID do usu√°rio: " . $userInfo['id'] . "\n";
        echo "üìä Tipo: " . ($userInfo['type'] ?? 'N/A') . "\n";
        echo "‚úÖ Ativo: " . ($userInfo['isActive'] ? 'Sim' : 'N√£o') . "\n";

        // Verificar permiss√µes espec√≠ficas
        if (isset($userInfo['permissions'])) {
            $permissions = $userInfo['permissions'];
            echo "\nüìã Permiss√µes relevantes:\n";
            echo "   üìù Lead - Create: " . ($permissions['lead']['create'] ? '‚úÖ' : '‚ùå') . "\n";
            echo "   üìù Lead - Edit: " . ($permissions['lead']['edit'] ? '‚úÖ' : '‚ùå') . "\n";
            echo "   üìù Opportunity - Create: " . ($permissions['opportunity']['create'] ? '‚úÖ' : '‚ùå') . "\n";
            echo "   üìù Opportunity - Edit: " . ($permissions['opportunity']['edit'] ? '‚úÖ' : '‚ùå') . "\n";
        }
    } else {
        echo "‚ùå N√£o foi poss√≠vel obter informa√ß√µes do usu√°rio\n";
    }
} catch (Exception $e) {
    echo "‚ùå Erro ao buscar informa√ß√µes do usu√°rio: " . $e->getMessage() . "\n";
}

echo "\n" . str_repeat("=", 60) . "\n";
echo "üéØ RESUMO DO DIAGN√ìSTICO:\n";
echo str_repeat("=", 60) . "\n";

echo "\nüí° PR√ìXIMOS PASSOS RECOMENDADOS:\n";
echo "1. Verifique se existe um workflow 'Lead to Opportunity' ativo\n";
echo "2. Confirme se as condi√ß√µes do workflow est√£o corretas\n";
echo "3. Verifique se o usu√°rio API tem permiss√£o para criar oportunidades\n";
echo "4. Teste criando um lead manualmente no EspoCRM\n";
echo "5. Verifique os logs de workflow para erros espec√≠ficos\n";

echo "\nüìã PARA CORRIGIR O PROBLEMA:\n";
echo "1. Acesse: Administra√ß√£o ‚Üí Workflows\n";
echo "2. Procure por workflows relacionados a Lead\n";
echo "3. Verifique se est√£o ativos e com condi√ß√µes corretas\n";
echo "4. Se necess√°rio, crie um novo workflow 'Lead to Opportunity'\n";

echo "\n‚úÖ DIAGN√ìSTICO CONCLU√çDO!\n";
